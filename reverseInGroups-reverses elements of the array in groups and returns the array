/*Given an array arr[] of positive integers of size N. Reverse every sub-array of K group elements.

complete the function reverseInGroups() which reverses elements of the array in groups and returns the array. The printing of array is done by drivercode.
Example:
Input
4
5 3
1 2 3 4 5
4 3
5 6 8 9
4 7
5 6 8 9
8 3
1 2 3 4 5 6 7 8

Output
3 2 1 5 4
8 6 5 9
9 8 6 5
3 2 1 6 5 4 8 7

Explanation:
Testcase 1: Reversing groups in size k = 3, first group consists of elements 1, 2, 3. Reversing this group, we have elements in order as 3, 2, 1.
Testcase 2: Our array is 5 6 8 9. The value of k is 3. So we reverse it in groups of 3.  After reversing, it becomes 8 6 5 9.
Testcase 3: Our array is 5 6 8 9. The value of k is 7. After reversing, it becomes 9 8 6 5.
Testcase 4: Our array is 1 2 3 4 5 6 7 8. The value of k is 3. After reversing, it becomes 3 2 1 6 5 4 8 7.*/

#include <bits/stdc++.h>
using namespace std;

// Function to reverse the array in groups
vector<long long> reverseInGroups(vector<long long> mv, int n, int k){
    //long long int temp;
    int l,r;
    for(int i=0;i<n;i=i+k)
    {
    	l=i;
    	if((i+k-1)<(n-1))
    	r=i+k-1;
    	else
    	r=n-1;
    	
    	while(l<r)
    	{
    		swap(mv[l++], mv[r--]);
		  }
	}
	return mv;
    
}

int main() {
    
    int t; //Testcases
    cin >> t; //input the number of testcases

    while(t--){ //while testcases exist

        int n;
        cin >> n; //input the size of array
        
        vector<long long> mv; // Declaring a vector mv
        
        int k;
        cin >> k; //input k 

        for(long long i =0;i<n;i++){
            long long x;
            cin >> x; //input element of array

            mv.push_back(x); //push the element into vector
        }
        
        mv = reverseInGroups(mv, n, k);
        
        for(long long i =0;i<n;i++){
            cout << mv[i] << " "; //Just print the vector
        }

        cout << endl;
      
    }
}
